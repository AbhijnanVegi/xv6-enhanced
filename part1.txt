diff --git a/Makefile b/Makefile
index 328f9c6..2be8294 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_strace\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..d41f993 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -104,6 +104,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            trace(int trace_mask);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..5d4c1b3 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -289,6 +289,9 @@ fork(void)
   }
   np->sz = p->sz;
 
+  // Copy tracer bits
+  np->trace_mask = p->trace_mask;
+
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
@@ -654,3 +657,11 @@ procdump(void)
     printf("\n");
   }
 }
+
+// Enables syscall tracing for process
+void
+trace(int trace_mask)
+{
+  struct proc *p = myproc();
+  p->trace_mask = trace_mask;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..115ead9 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -105,4 +105,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int trace_mask;                  // Syscall bits to be traced
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..b53189e 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_trace(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,18 +128,85 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+};
+
+struct syscall_info {
+    const int argnum;
+    const char* name;
+};
+
+struct syscall_info syscall_infos[] = {
+    [SYS_fork]
+    { 0, "fork" },
+    [SYS_exit]
+    { 1, "exit" },
+    [SYS_wait]
+    { 1, "wait" },
+    [SYS_pipe]
+    { 0, "pipe" },
+    [SYS_read]
+    { 3, "read" },
+    [SYS_kill]
+    { 2, "kill" },
+    [SYS_exec]
+    { 2, "exec" },
+    [SYS_fstat]
+    { 1, "fstat" },
+    [SYS_chdir]
+    { 1, "chdir" },
+    [SYS_dup]
+    { 1, "dup" },
+    [SYS_getpid]
+    { 0, "getpid" },
+    [SYS_sbrk]
+    { 1, "sbrk" },
+    [SYS_sleep]
+    { 1, "sleep" },
+    [SYS_uptime]
+    { 0, "uptime" },
+    [SYS_open]
+    { 2, "open" },
+    [SYS_write]
+    { 3, "write" },
+    [SYS_mknod]
+    { 3, "mknod" },
+    [SYS_unlink]
+    { 1, "unlink" },
+    [SYS_link]
+    { 2, "link" },
+    [SYS_mkdir]
+    { 1, "mkdir" },
+    [SYS_close]
+    { 1, "close" },
+    [SYS_trace]
+    { 1, "trace" },
 };
 
 void
 syscall(void)
 {
   int num;
+  int trace_mask;
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+  trace_mask = p->trace_mask;
+  if (num > 0 && num < NELEM(syscalls) && syscalls[num])
+  {
     p->trapframe->a0 = syscalls[num]();
-  } else {
+    if (trace_mask & (1 << num))
+    {
+      printf("\n%d: syscall %s (",p->pid,syscall_infos[num].name);
+      for (int i = 0; i < syscall_infos[num].argnum; i++)
+      {
+        printf("%d ",argraw(i));
+      }
+      printf(") %d\n", p->trapframe->a0);
+    }
+  }
+  else
+  {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..cc112b9 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..6d4574e 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -95,3 +95,12 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int n;
+  argint(0, &n);
+  trace(n);
+  return 0;
+}
diff --git a/user/user.h b/user/user.h
index b71ecda..e10d959 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void trace(int trace_mask);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..9c97b05 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
